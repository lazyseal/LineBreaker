import sys, time, serial, datetime
import matplotlib.pyplot as plt
from PyQt5 import QtWidgets, QtGui, QtCore
from PyQt5.QtWidgets import QApplication, QLabel, QPushButton, QMainWindow, QLCDNumber, QFileDialog, QTextEdit, QGridLayout
from PyQt5.QtCore import QCoreApplication

from grid3 import Ui_MainWindow

text1 = '''
–í–µ—Ä—Å–∏—è 0.80
–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –æ—Ç–∫—Ä—ã—Ç–∏–µ COM-–ø–æ—Ä—Ç–∞
(–í —Ä–∞–±–æ—Ç–µ)–û–±–Ω–æ–≤–ª—ë–Ω –∞–ª–≥–æ—Ä–∏—Ç–º —Ä–∞–±–æ—Ç—ã –∫–Ω–æ–ø–∫–∏ "–ù–∞—á–∞—Ç—å –∑–∞–ø–∏—Å—å" - —Ç–µ–ø–µ—Ä—å –µ—ë –Ω–∞–∂–∞—Ç–∏–µ –æ–±–Ω—É–ª—è–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ —Ä–∞–Ω–µ–µ –¥–∞–Ω–Ω—ã–µ

–ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —É–∫–∞–∑—ã–≤–∞—é—Ç—Å—è —á–µ—Ä–µ–∑ "-" 
–ù–∞–ø—Ä–∏–º–µ—Ä:
COM1-9600
–ü–æ–∫–∞ —á—Ç–æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –∏–º—è –ø–æ—Ä—Ç–∞ –∏ —Å–∫–æ—Ä–æ—Å—Ç—å
–æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã -N-8-1 –∑–∞–¥–∞–Ω—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
–ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –Ω—É–∂–Ω–æ –Ω–∞–∂–∞—Ç—å "–ù–∞—á–∞—Ç—å –∑–∞–ø–∏—Å—å". –ö–æ–≥–¥–∞ –±—É–¥–µ—Ç –Ω–∞–∫–æ–ø–ª–µ–Ω–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏, –Ω—É–∂–Ω–æ –Ω–∞–∂–∞—Ç—å "–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–ø–∏—Å—å".

–ö–Ω–æ–ø–∫–∞ "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ —Ñ–∞–π–ª" —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ, –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –º–µ–∂–¥—É –Ω–∞–∂–∞—Ç–∏—è–º–∏ –∫–Ω–æ–ø–∫–∏ "–ù–∞—á–∞—Ç—å –∑–∞–ø–∏—Å—å" –∏ –Ω–∞–∂–∞—Ç–∏–µ–º "–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–ø–∏—Å—å" –≤ —Å—ã—Ä–æ–º –≤–∏–¥–µ

–ö–Ω–æ–ø–∫–∞ "–í—ã–±—Ä–∞—Ç—å —Ñ–∞–π–ª" –ø–æ–∑–≤–æ–ª—è–µ—Ç –≤—ã–±—Ä–∞—Ç—å —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ –∏ —Å—Ä–∞–∑—É –∂–µ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç –¥–∞–Ω–Ω—ã–µ
–∏–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ –≤ —Ñ–∞–π–ª output.txt
–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –∏—Ö –≤ –¥–µ—Å—è—Ç–∏—á–Ω—É—é —Å–∏—Å—Ç–µ–º—É –≤ —Ñ–∞–π–ª output_decimal.txt
–ü—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–æ—Ä–º–∞—Ç–∞ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ–∫–∞ —á—Ç–æ –Ω–µ—Ç, –µ—Å–ª–∏ –∑–∞–≥—Ä—É–∑–∏—Ç—å —á—Ç–æ-—Ç–æ –Ω–µ —Ç–æ - –ø—Ä–æ–≥—Ä–∞–º–º–∞ —É–ø–∞–¥—ë—Ç üòÑ

–ö–Ω–æ–ø–∫–∞ "–ü–æ—Å—Ç—Ä–æ–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫" —Å—Ç—Ä–æ–∏—Ç –≥—Ä–∞—Ñ–∏–∫ –Ω–∞ –æ—Å–Ω–æ–≤–∞–Ω–∏–∏ –∑–∞–ø–∏—Å–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–∞

–ö–Ω–æ–ø–∫–∞ "–í—ã—Ö–æ–¥" –ø–æ–∑–≤–æ–ª—è–µ—Ç –≤—ã–π—Ç–∏ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã


'''
strings = 0
decimals = []



def detect_com_parameters(line):
    dash = line.find('-')
    com_line = line[0: dash]
    com_line = com_line.upper()
    com_speed = line[dash+1:]
    return com_line, com_speed


def open_com_port(com_number, com_speed):
    com = serial.Serial(com_number, com_speed)
    com.close()
    com.open()
    print(com_number + ' @ ' + com_speed + '–û—Ç–∫—Ä—ã—Ç —É—Å–ø–µ—à–Ω–æ. –ó–∞–ø–∏—Å—å –Ω–∞—á–∞—Ç–∞')
    return com

def close_com_port(com_number):
    com = serial.Serial(com_number)
    com.close()
    print(com_number + ' –ó–∞–∫—Ä—ã—Ç —É—Å–ø–µ—à–Ω–æ. –ó–∞–ø–∏—Å—å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞')


def readraw(raw):
    print('Input size = ' + str(int(len(raw)/4)) + ' words \n')
    out = open('output.txt', 'w')
    outdec = open('output_decimal.txt', 'w')
    i = int(0)
    while i <= len(raw):
        word = raw[i:i+4]
        out.write(word + '\n')
        if word != '':
            decword = int(word, 16)
            decword = decword/8
            if  int(decword) > 8:
                outdec.write(str(decword) + '\n')
        i += 4
    outdec.write('\n')
    out.close()
    outdec.close()
    strings = int(len(raw)/4)
    return strings




class ReadingThread(QtCore.QThread):

    def __init__(self, parent=None):
        QtCore.QThread.__init__(self, parent)


    def run(self):
        com_line = window.com_line.text()
        print(com_line)
        com, speed = detect_com_parameters(com_line)
        ser = open_com_port(com, speed)
        outdec = open('output_decimal.txt', 'w')
        raw_data = ''
        raw_data_file = open('temp_raw.txt', 'w')
        window.textBrowser.append(datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S") + ' –ó–∞–ø–∏—Å—å –Ω–∞—á–∞—Ç–∞ –∏–∑ –ø–æ—Ä—Ç–∞ ' + com + ' –ù–∞ —Å–∫–æ—Ä–æ—Å—Ç–∏ ' + speed)
        self.running = True
        while self.running:
            try:
                for i in range(0, 31536000):
                    if self.running is True:
                        word = ser.read(2)
                        decword = int.from_bytes(word, byteorder='big')
                        hexword = str(hex(decword))
                        hexword = hexword[2:].upper()
                        print(hexword)
                        raw_data += hexword
                        decword = float(decword)
                        if int(decword) > 8:
                            decimals.append(decword/8)
                        window.lcdNumber.display(i)

                    else:

                        outdec.close()
                        window.textBrowser.append(datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S") + ' –ó–∞–ø–∏—Å—å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞')
                        raw_data_file.write(raw_data)
                        raw_data_file.close()
                        return

            except Exception as err:
                print(err)


class MainWindow(QMainWindow, Ui_MainWindow):
    def __init__(self, *args, **kwargs):
        super(MainWindow, self).__init__(*args, **kwargs)
        self.setupUi(self)

        self.plot_button.clicked.connect(self.runclicked)
        self.file_button.clicked.connect(self.openfileclicked)
        self.start_button.clicked.connect(self.startclicked)
        self.stop_button.clicked.connect(self.stopclicked)
        self.save_button.clicked.connect(self.savefileclicked)

        self.statusBar().showMessage('Ready')
        self.show()
        self.pause = False

    def showFileDialog(self):
        rawfilename = QFileDialog.getOpenFileName(self, 'Open File')[0]
        f = open(rawfilename, 'r')
        temp_raw_file = open('temp_raw.txt', 'w')
        raw = f.read()
        tempraw = f.read()
        self.textBrowser.append(str(rawfilename)+' –ü—Ä–æ—á–∏—Ç–∞–Ω —É—Å–ø–µ—à–Ω–æ')
        strings = readraw(raw)
        self.textBrowser.append(str(strings)+' –°—Ç—Ä–æ–∫ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ')
        dec = open('output_decimal.txt')
        nextline = ''
        while nextline != '\n':
            nextline = dec.readline()
            if len(nextline) > 2:
                nextdec = float(nextline)
                decimals.append(nextdec)
        window.lcdNumber.display(strings)
        temp_raw_file.write(str(tempraw))
        temp_raw_file.close()


    def saveFileDialog(self):
        rawfilename = QFileDialog.getSaveFileName(self, 'Save')[0]
        f = open(rawfilename, 'w')
        df = open('temp_raw.txt', 'r')
        data = df.read()
        f.write(data)
        window.textBrowser.append('–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ —Ñ–∞–π–ª ' + str(rawfilename))
        df.close()
        f.close()




    def runclicked(self):
        self.textBrowser.append('–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞')
        plot(decimals)
        self.textBrowser.append('–û–∫–Ω–æ –≥—Ä–∞—Ñ–∏–∫–∞ –∑–∞–∫—Ä—ã—Ç–æ')

    def openfileclicked(self):
        try:
            self.showFileDialog()
        except:
            pass

    def savefileclicked(self):
        try:
            self.saveFileDialog()
        except:
            pass

    def startclicked(self):
        try:
            self.thread1 = ReadingThread()
            self.thread1.start()
        except:
            pass


    def stopclicked(self):
        try:
            self.thread1.running = False

        except:
            pass




    def read_com_port_parameters(self):
        com_number = 'COM4'
        com_speed = '9600'
        return com_number, com_speed




#–§—É–Ω–∫—Ü–∏–∏ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –º–∏–Ω–∏–º—É–º–∞, –º–∞–∫—Å–∏–º—É–º–∞, –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è
def maxdeviation(data, value, n):
    maximum = data[0]
    minimum = data[0]
    for i in range(0, n):
        if data[i] > maximum:
            maximum = data[i]
        if data[i] < minimum:
            minimum = data[i]
    if (maximum - value) > (value - minimum):
        return maximum - value
    else:
        return -(value - minimum)


def plotmax(data, n):
    maximum = data[0]
    minimum = data[0]
    maxi = 0
    for i in range(0, n):
        if data[i] > maximum:
            maximum = data[i]
            maxi = i
        if data[i] < minimum:
            minimum = data[i]
            mini = i

    window.textBrowser.append('–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –∏–º–ø—É–ª—å—Å–∞ = ' + str(maximum) + ' –º–∫—Å–µ–∫')
    return maximum, maxi


def plotmin(data, n):
    minimum = data[64]
    mini = 64
    for i in range(64, n):
        if data[i] < minimum:
            minimum = data[i]
            mini = i
    window.textBrowser.append('–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –∏–º–ø—É–ª—å—Å–∞ = ' + str(minimum) + ' –º–∫—Å–µ–∫')
    return mini, minimum


# –§—É–Ω–∫—Ü–∏—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è —á–µ—Ä—Ç–µ–∂–∞

def plot(decimals):
    axisx = []
    values = []
    approximateValues = []
 #   approximateValues[1] = values[1]
 #   approximateValues[-1] = values[-1]
    medium = 0
    statistic = 0
    i = int(1)
    for i in range (0, len(decimals)):
        print(i)
        values.append(decimals[i])
        axisx.append(i)
 #       if i > 1 and i < len(decimals):
 #           approxi = (decimals[i-1] + decimals[i+1]) /2
 #           approximateValues.append(approxi)

#    ApproxValue = float(decimals[0])
    maximum, maxi = plotmax(values, i)
    mini, minimum = plotmin(values, i)
#    plt.annotate(
#        '–°—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ = ' + str('%.2f' % float(medium / i)) + ' $\mu$—Å–µ–∫, \n–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ = ' + str(
#            '%.2f' % maxdeviation(values, medium / i, i)) + ' $\mu$—Å–µ–∫', xy=(0, ApproxValue))
    plt.ylabel('–î–ª–∏–Ω–∞ –∏–º–ø—É–ª—å—Å–∞, $\mu$—Å–µ–∫')
    plt.xlabel('–û—Ç—Å—á—ë—Ç—ã —Ç–∞–π–º–µ—Ä–∞')
    plt.grid(True)
    plt.plot(axisx, values)
 #   plt.plot(axisx, approximateValues)
    plt.plot(maxi, maximum, 'ro')
    plt.plot(mini, minimum, 'ro')
    plt.annotate('–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –∏–º–ø—É–ª—å—Å–∞ = ' + str(minimum) + ' $\mu$—Å–µ–∫', xy=(mini, (minimum)))
    plt.annotate('–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –∏–º–ø—É–ª—å—Å–∞ = ' + str(maximum) + ' $\mu$—Å–µ–∫', xy=(maxi, (maximum)))
    plt.show()




# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
if __name__ == '__main__':
    app = QApplication([])
    app.setApplicationName("LineBreaker 0.80")
    window = MainWindow()
    window.label.setFont(QtGui.QFont('Calibri', 9))
    window.label.setText(text1)
    window.quit_button.clicked.connect(QCoreApplication.instance().quit)

    app.exec_()
